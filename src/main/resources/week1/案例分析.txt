案例分析

启动参数为：
JAVA_OPTS=-Xmx200g -Xms200g -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -XX:ZCollectionInterval=30 -XX:ZAllocationSpikeTolerance=5 -XX:ReservedCodeCacheSize=2g -XX:InitialCodeCacheSize=2g -XX:ConcGCThreads=8 -XX:ParallelGCThreads=16

另一个系统的启动参数为:
JAVA_OPTS=-Xmx4g -Xms4g -XX:+UseG1GC -XX:MaxGCPauseMillis=50

系统容量: 业务规模, 并发, 成本预算; 需要兼顾性能与成本;
延迟要求: 最坏情况下能接受多少时间的延迟尖刺。
吞吐量: 根据业务特征来确定, 比如, 网关, 大数据底层平台, 批处理作业系统, 在线实时应用, 他们最重要的需求不一样。
系统架构: 比如拆分为小内存更多节点, 还是大内存少量节点。
其他...

---------------------------------------------
由于没有真正的生产上的配置，所以给一个思路：
1，首先获取服务器的基本信息，比如内存大小等，因为软件还是基于硬件的
2，获取JDK版本信息，因为不同的公司由于历史的原因等，JDK的版本可能非常老，也有可能很新，所以需要获取JDK的版本信息，这样才能判定JVM的参数与GC类型
3，根据业务来分析一些参数，比如业务规模, 并发, 成本预算; 需要兼顾性能与成本;
4，根据业务来判定最坏情况下能接受多少时间的延迟
5，根据业务来判定需要的吞吐量
6，选择合适的参数

举例：
比如某大学的学生后台管理系统，单机，在一台4核8G的服务器上，JDK版本是1.8，使用人数为这个学校的师生，主要的功能为选课，考试，学生管理等

1，硬件分析：
4核8G的服务器，也就意味着内存最大就是8G，4核

2，JDK分析：
1.8

3，业务分析：
学生后台管理系统
1，使用人数为这个学校的师生，使用量为某大学师生数量，使用人数大概几万人
2，学生后台管理系统，根据功能分析，只有在选课的时机，可能出现并发，那么就不需要特别的高吞吐
3，学生后台管理系统不需要特别高性能，那么有一些延迟也是可以接受的
4，另外数据的高可用是需要的，性能上不需要那么高性能

这样，比如JVM的参数设置
-Xmx3550m： 设置 JVM 最大可用内存为 3550M。
-Xms3550m： 设置 JVM 初始内存为 3550m。此值可以设置与-Xmx 相同，以避免每次垃圾
回收完成后 JVM 重新分配内存。
-Xmn2g： 设置年轻代大小为 2G。整个堆大小=年轻代大小 + 年老代大小 + 持久代大小。
持久代一般固定大小为 64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能
影响较大， Sun 官方推荐配置为整个堆的 3/8。
-Xss128k： 设置每个线程的堆栈大小。 JDK5.0 以后每个线程堆栈大小为 1M，以前每个线
程堆栈大小为 256K。更具应用的线程所需内存大小进行调整。在相同物理内存下，减小这
个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，
经验值在 3000~5000 左右。
-XX:+UseParallelGC： 选择垃圾收集器为并行收集器。 此配置仅对年轻代有效。即上述配
置下，年轻代使用并发收集，而年老代仍旧使用串行收集。
-XX:ParallelGCThreads=4： 配置并行收集器的线程数，即：同时多少个线程一起进行垃
圾回收。此值最好配置与处理器数目相等。






